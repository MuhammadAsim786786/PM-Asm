{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/selfc/Downloads/pm-asm-20251005T073831Z-1-001/pm-asm/app/api/compareFromSources/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst GROQ_URL = \"https://api.groq.com/openai/v1/chat/completions\";\nconst GROQ_API_KEY = process.env.GROQ_API_KEY;\n\nconst MODEL = \"llama-3.1-8b-instant\";\nconst TEMP = 0.3;\nconst CHAR_LIMIT = 400;\nconst MAX_SECTIONS = 1;\nconst TOKENS_SUMMARY = 220;\nconst TOKENS_COMPARE = 320;\n\nconst BOOK_DIRS = [\n  path.join(process.cwd(), \"data\"),\n  path.join(process.cwd(), \"public\", \"data\"),\n];\n\nfunction safe(s) {\n  return (s ?? \"\").toString();\n}\nfunction truncate(s, n = CHAR_LIMIT) {\n  if (!s) return \"\";\n  return s.length > n ? s.slice(0, n) + \"...(truncated)\" : s;\n}\nfunction textMatchesTopic(text, topic) {\n  return safe(text).toLowerCase().includes(topic.toLowerCase());\n}\n\nasync function findBooksDir() {\n  for (const d of BOOK_DIRS) {\n    try {\n      const st = await fs.promises.stat(d);\n      if (st.isDirectory()) return d;\n    } catch {}\n  }\n  return null;\n}\n\nasync function loadBooks(dir) {\n  const files = await fs.promises.readdir(dir);\n  const results = [];\n  for (const f of files) {\n    if (!f.toLowerCase().endsWith(\".json\")) continue;\n    const full = path.join(dir, f);\n    try {\n      const raw = await fs.promises.readFile(full, \"utf8\");\n      results.push({ fileName: f, data: JSON.parse(raw) });\n    } catch {}\n  }\n  return results;\n}\n\n// normalize different data structures\nfunction normalize(fileRec) {\n  const { fileName, data } = fileRec;\n  let sections = [];\n\n  if (Array.isArray(data)) {\n    sections = data;\n  } else if (Array.isArray(data?.chunks)) {\n    sections = data.chunks;\n  } else if (Array.isArray(data?.sections)) {\n    sections = data.sections;\n  } else if (data && data.content) {\n    sections = [data];\n  } else if (typeof data === \"object\") {\n    const nestedArray = Object.values(data).find((v) => Array.isArray(v));\n    if (nestedArray) sections = nestedArray;\n  }\n\n  return {\n    bookId: fileName,\n    title: data?.title ?? fileName.replace(\".json\", \"\"),\n    sections: sections.map((s, i) => ({\n      sectionId: `${fileName}::${i}`,\n      title: s.title ?? s.full_title ?? \"\",\n      content: s.content ?? \"\",\n    })),\n  };\n}\n\nasync function callGroq(messages, max_tokens) {\n  const resp = await fetch(GROQ_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${GROQ_API_KEY}`,\n    },\n    body: JSON.stringify({\n      model: MODEL,\n      messages,\n      max_tokens,\n      temperature: TEMP,\n    }),\n  });\n\n  if (!resp.ok) {\n    const txt = await resp.text();\n    throw new Error(`Groq call failed: ${txt}`);\n  }\n  return await resp.json();\n}\n\nexport async function POST(req) {\n  try {\n    const { topic } = await req.json();\n    if (!topic)\n      return NextResponse.json(\n        { success: false, error: \"Topic is required\" },\n        { status: 400 }\n      );\n\n    const dir = await findBooksDir();\n    if (!dir)\n      return NextResponse.json(\n        { success: false, error: \"Books directory not found\" },\n        { status: 500 }\n      );\n\n    const files = await loadBooks(dir);\n    const books = files.map(normalize);\n\n    const matched = [];\n    for (const b of books) {\n      const hits = b.sections.filter((s) => textMatchesTopic(s.content, topic));\n      if (hits.length > 0)\n        matched.push({ ...b, matches: hits.slice(0, MAX_SECTIONS) });\n    }\n\n    // fallback: if exact match not found, include all books\n    if (matched.length === 0) {\n      matched.push(\n        ...books.map((b) => ({ ...b, matches: b.sections.slice(0, 1) }))\n      );\n    }\n\n    // === per-book summaries ===\n    const summaries = [];\n    for (const b of matched) {\n      const section = b.matches[0];\n      const content = truncate(section.content);\n\n      const prompt = `\nSummarize how the concept \"${topic}\" relates to or appears within this section from \"${b.title}\". \n- Focus on meaning, principles, processes, and context relevant to the topic.\n- Even if the topic word is not used, summarize any related ideas or guidance that align conceptually.\n- Do NOT say that the topic is missing or not mentioned.\n- Write as an authoritative summary (max 100 words).\n`;\n\n      const res = await callGroq(\n        [\n          {\n            role: \"system\",\n            content: \"You are a precise technical summarizer.\",\n          },\n          { role: \"user\", content: prompt + \"\\n\\nSection:\\n\" + content },\n        ],\n        TOKENS_SUMMARY\n      );\n\n      const summary =\n        res?.choices?.[0]?.message?.content?.trim() ?? \"(no summary)\";\n      summaries.push({ bookId: b.bookId, title: b.title, summary });\n    }\n\n    // === aggregate comparison ===\n    const comparePrompt = `\nCompare how the topic \"${topic}\" is treated across the following project management sources.\nUse only the information in the summaries. \nNever mention missing data or absence. Focus on conceptual, structural, and methodological aspects.\n\nProvide output in **three sections**, each with clear bullet points:\n\n**Similarities:**\n- ...\n\n**Differences:**\n- ...\n\n**Unique Points:**\n- ...\n\nSources:\n${summaries.map((s) => `- ${s.title}: ${s.summary}`).join(\"\\n\")}\n`;\n\n    const agg = await callGroq(\n      [\n        {\n          role: \"system\",\n          content:\n            \"You are an expert in comparative project management standards.\",\n        },\n        { role: \"user\", content: comparePrompt },\n      ],\n      TOKENS_COMPARE\n    );\n\n    const finalComparison =\n      agg?.choices?.[0]?.message?.content?.trim() ?? \"No comparison available.\";\n\n    return NextResponse.json({\n      success: true,\n      matchedBooks: matched.length,\n      summaries,\n      comparison: finalComparison,\n    });\n  } catch (e) {\n    console.error(\"compareFromSources error:\", e);\n    return NextResponse.json(\n      { success: false, error: e.message },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}